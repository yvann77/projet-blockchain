// Configuration et variables globales
let web3Provider;
let contract;
let userAccount;
let isOwner = false;
let selectedCandidate = null;

// ABI du contrat avec les nouvelles fonctions
const CONTRACT_ABI = [
    "function votingTitle() view returns (string)",
    "function votingActive() view returns (bool)",
    "function votingEnded() view returns (bool)",
    "function candidatesCount() view returns (uint256)",
    "function totalVotes() view returns (uint256)",
    "function owner() view returns (address)",
    "function vote(uint256 _candidateId)",
    "function startVoting()",
    "function endVoting()",
    "function resetVoting(string _newTitle)",
    "function resetMultipleVoters(address[] _voters)",
    "function getAllCandidates() view returns (tuple(uint256 id, string name, uint256 voteCount)[])",
    "function getVotingStatus() view returns (string, bool, bool, uint256, uint256)",
    "function getVoterInfo(address _voter) view returns (bool, bool, uint256)",
    "function getWinningCandidate() view returns (uint256, string, uint256)",
    "event VoteCasted(address indexed voter, uint256 indexed candidateId)",
    "event VotingStarted()",
    "event VotingEnded()",
    "event VotingReset()"
];

// Initialisation de l'application
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    setupEventListeners();
});

// V√©rification des d√©pendances au d√©but du fichier script.js
console.log('üîç V√©rification des d√©pendances...');

// V√©rifier ethers.js
if (typeof ethers === 'undefined') {
    console.error('‚ùå ethers is not defined');
    alert('Erreur: La librairie ethers.js n\'est pas charg√©e. Rechargez la page.');
    throw new Error('ethers.js not loaded');
} else {
    console.log('‚úÖ ethers.js est disponible, version:', ethers.version);
}

// V√©rifier MetaMask
if (typeof window.ethereum === 'undefined') {
    console.warn('‚ö†Ô∏è MetaMask n\'est pas d√©tect√©');
} else {
    console.log('‚úÖ MetaMask d√©tect√©');
}

async function initializeApp() {
    console.log('üöÄ Initialisation de l\'application...');
    
    // V√©rifier si MetaMask est install√©
    if (typeof window.ethereum === 'undefined') {
        showToast('MetaMask n\'est pas install√©. Veuillez l\'installer pour utiliser cette application.', 'error');
        return;
    }
    
    // V√©rifier si l'utilisateur est d√©j√† connect√©
    try {
        const accounts = await window.ethereum.request({ method: 'eth_accounts' });
        if (accounts.length > 0) {
            await connectWallet();
        }
    } catch (error) {
        console.error('Erreur lors de la v√©rification de la connexion:', error);
    }
}

function setupEventListeners() {
    // Bouton de connexion MetaMask
    document.getElementById('connectWallet').addEventListener('click', connectWallet);
    
    // Boutons administrateur
    document.getElementById('startVoting').addEventListener('click', startVoting);
    document.getElementById('endVoting').addEventListener('click', endVoting);
    document.getElementById('resetVoting').addEventListener('click', resetVoting); // ‚ú® NOUVEAU
    document.getElementById('refreshData').addEventListener('click', loadVotingData);
    
    // Bouton de vote
    document.getElementById('submitVote').addEventListener('click', submitVote);
    
    // √âcouter les changements de compte MetaMask
    if (window.ethereum) {
        window.ethereum.on('accountsChanged', handleAccountsChanged);
        window.ethereum.on('chainChanged', handleChainChanged);
    }
}

async function connectWallet() {
    try {
        showLoading('Connexion √† MetaMask...');
        
        // Demander la connexion √† MetaMask
        const accounts = await window.ethereum.request({
            method: 'eth_requestAccounts'
        });
        
        if (accounts.length === 0) {
            throw new Error('Aucun compte s√©lectionn√©');
        }
        
        userAccount = accounts[0];
        
        // Configurer le provider ethers
        web3Provider = new ethers.providers.Web3Provider(window.ethereum);
        
        // V√©rifier le r√©seau
        const network = await web3Provider.getNetwork();
        if (network.chainId !== 1337) {
            showToast('Veuillez vous connecter au r√©seau Hardhat local (Chain ID: 1337)', 'warning');
        }
        
        // Initialiser le contrat
        if (typeof CONTRACT_INFO !== 'undefined') {
            contract = new ethers.Contract(
                CONTRACT_INFO.contractAddress,
                CONTRACT_ABI,
                web3Provider.getSigner()
            );
            
            // V√©rifier si l'utilisateur est le propri√©taire
            const owner = await contract.owner();
            isOwner = owner.toLowerCase() === userAccount.toLowerCase();
            
            console.log('‚úÖ Contrat initialis√©:', CONTRACT_INFO.contractAddress);
            console.log('üë§ Compte utilisateur:', userAccount);
            console.log('üîë Est propri√©taire:', isOwner);
        } else {
            throw new Error('Informations du contrat non disponibles');
        }
        
        updateConnectionStatus(true);
        await loadVotingData();
        hideLoading();
        
        showToast('Connexion r√©ussie !', 'success');
        
    } catch (error) {
        console.error('Erreur de connexion:', error);
        hideLoading();
        showToast('Erreur de connexion: ' + error.message, 'error');
    }
}

async function loadVotingData() {
    if (!contract) return;
    
    try {
        showLoading('Chargement des donn√©es...');
        
        // Charger les informations du vote
        const [title, active, ended, candidatesCount, totalVotes] = await contract.getVotingStatus();
        
        // Mettre √† jour l'interface
        document.getElementById('votingTitle').textContent = title;
        document.getElementById('totalVotes').textContent = totalVotes.toString();
        
        let statusText = 'Inactif';
        let statusClass = 'inactive';
        
        if (ended) {
            statusText = 'Termin√©';
            statusClass = 'ended';
        } else if (active) {
            statusText = 'Actif';
            statusClass = 'active';
        }
        
        const statusElement = document.getElementById('votingStatus');
        statusElement.textContent = statusText;
        statusElement.className = `value status ${statusClass}`;
        
        // Charger les informations de l'√©lecteur
        const [isRegistered, hasVoted, votedCandidateId] = await contract.getVoterInfo(userAccount);
        
        let voterStatusText = 'Non enregistr√©';
        if (isRegistered) {
            voterStatusText = hasVoted ? `A vot√© (Candidat #${votedCandidateId})` : 'Enregistr√©, peut voter';
        }
        document.getElementById('voterStatus').textContent = voterStatusText;
        
        // Charger les candidats
        await loadCandidates(active && !ended && isRegistered && !hasVoted);
        
        // Afficher les r√©sultats si le vote est termin√©
        if (ended) {
            await loadResults();
        }
        
        // Afficher les sections appropri√©es
        updateUIVisibility(active, ended, isRegistered, hasVoted);
        
        hideLoading();
        
    } catch (error) {
        console.error('Erreur lors du chargement des donn√©es:', error);
        hideLoading();
        showToast('Erreur lors du chargement: ' + error.message, 'error');
    }
}

async function loadCandidates(canVote = false) {
    try {
        const candidates = await contract.getAllCandidates();
        const grid = document.getElementById('candidatesGrid');
        
        grid.innerHTML = '';
        
        candidates.forEach(candidate => {
            const candidateCard = document.createElement('div');
            candidateCard.className = `candidate-card ${!canVote ? 'disabled' : ''}`;
            candidateCard.dataset.candidateId = candidate.id.toString();
            
            candidateCard.innerHTML = `
                <div class="candidate-name">${candidate.name}</div>
                <div class="candidate-votes">${candidate.voteCount} votes</div>
            `;
            
            if (canVote) {
                candidateCard.addEventListener('click', () => selectCandidate(candidate.id));
            }
            
            grid.appendChild(candidateCard);
        });
        
    } catch (error) {
        console.error('Erreur lors du chargement des candidats:', error);
        showToast('Erreur lors du chargement des candidats', 'error');
    }
}

function selectCandidate(candidateId) {
    // D√©s√©lectionner tous les candidats
    document.querySelectorAll('.candidate-card').forEach(card => {
        card.classList.remove('selected');
    });
    
    // S√©lectionner le candidat cliqu√©
    const selectedCard = document.querySelector(`[data-candidate-id="${candidateId}"]`);
    if (selectedCard) {
        selectedCard.classList.add('selected');
        selectedCandidate = candidateId;
        
        // Afficher le bouton de vote
        document.getElementById('submitVote').style.display = 'block';
    }
}

async function submitVote() {
    if (!selectedCandidate) {
        showToast('Veuillez s√©lectionner un candidat', 'warning');
        return;
    }
    
    try {
        showLoading('Envoi du vote...');
        
        const tx = await contract.vote(selectedCandidate);
        
        showLoading('Confirmation de la transaction...');
        await tx.wait();
        
        hideLoading();
        showToast('Vote envoy√© avec succ√®s !', 'success');
        
        // Recharger les donn√©es
        await loadVotingData();
        
    } catch (error) {
        console.error('Erreur lors du vote:', error);
        hideLoading();
        
        let errorMessage = 'Erreur lors du vote';
        if (error.message.includes('deja vote')) {
            errorMessage = 'Vous avez d√©j√† vot√©';
        } else if (error.message.includes('not active')) {
            errorMessage = 'Le vote n\'est pas actif';
        } else if (error.message.includes('not registered')) {
            errorMessage = 'Vous n\'√™tes pas enregistr√© comme √©lecteur';
        }
        
        showToast(errorMessage, 'error');
    }
}

async function startVoting() {
    if (!isOwner) {
        showToast('Seul le propri√©taire peut d√©marrer le vote', 'error');
        return;
    }
    
    try {
        showLoading('D√©marrage du vote...');
        
        const tx = await contract.startVoting();
        await tx.wait();
        
        hideLoading();
        showToast('Vote d√©marr√© avec succ√®s !', 'success');
        
        await loadVotingData();
        
    } catch (error) {
        console.error('Erreur lors du d√©marrage:', error);
        hideLoading();
        showToast('Erreur lors du d√©marrage: ' + error.message, 'error');
    }
}

async function endVoting() {
    if (!isOwner) {
        showToast('Seul le propri√©taire peut terminer le vote', 'error');
        return;
    }
    
    try {
        showLoading('Arr√™t du vote...');
        
        const tx = await contract.endVoting();
        await tx.wait();
        
        hideLoading();
        showToast('Vote termin√© avec succ√®s !', 'success');
        
        await loadVotingData();
        
    } catch (error) {
        console.error('Erreur lors de l\'arr√™t:', error);
        hideLoading();
        showToast('Erreur lors de l\'arr√™t: ' + error.message, 'error');
    }
}

// ‚ú® NOUVELLE FONCTION RESET
async function resetVoting() {
    if (!isOwner) {
        showToast('Seul le propri√©taire peut r√©initialiser le vote', 'error');
        return;
    }
    
    // Demander confirmation
    const confirmation = confirm('√ätes-vous s√ªr de vouloir d√©marrer un nouveau vote ? Cela r√©initialisera tous les r√©sultats actuels.');
    if (!confirmation) return;
    
    try {
        showLoading('R√©initialisation du vote...');
        
        // R√©initialiser le vote avec un nouveau titre
        const newTitle = prompt('Nouveau titre pour le vote:', 'Nouvelle √âlection 2025');
        if (!newTitle) {
            hideLoading();
            return;
        }
        
        const tx = await contract.resetVoting(newTitle);
        await tx.wait();
        
        // Reset des √©lecteurs enregistr√©s
        showLoading('R√©initialisation des √©lecteurs...');
        const voterAddresses = [
            "0x70997970C51812dc3A010C7d01b50e0d17dc79C8",
            "0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC",
            "0x90F79bf6EB2c4f870365E785982E1f101E93b906",
            "0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65"
        ];
        
        const resetTx = await contract.resetMultipleVoters(voterAddresses);
        await resetTx.wait();
        
        hideLoading();
        showToast('Nouveau vote cr√©√© avec succ√®s !', 'success');
        
        await loadVotingData();
        
    } catch (error) {
        console.error('Erreur lors de la r√©initialisation:', error);
        hideLoading();
        showToast('Erreur lors de la r√©initialisation: ' + error.message, 'error');
    }
}

async function loadResults() {
    try {
        const candidates = await contract.getAllCandidates();
        const totalVotes = await contract.totalVotes();
        
        const resultsContainer = document.getElementById('resultsContainer');
        resultsContainer.innerHTML = '';
        
        // Trier les candidats par nombre de votes (d√©croissant)
        const sortedCandidates = [...candidates].sort((a, b) => b.voteCount - a.voteCount);
        
        sortedCandidates.forEach(candidate => {
            const percentage = totalVotes > 0 ? (candidate.voteCount * 100 / totalVotes).toFixed(1) : 0;
            
            const resultItem = document.createElement('div');
            resultItem.className = 'result-item';
            
            resultItem.innerHTML = `
                <div class="result-candidate">${candidate.name}</div>
                <div class="result-votes">
                    <span class="vote-count">${candidate.voteCount} votes</span>
                    <div class="progress-bar">
                        <div class="progress-fill" style="width: ${percentage}%"></div>
                    </div>
                    <span class="vote-percentage">${percentage}%</span>
                </div>
            `;
            
            resultsContainer.appendChild(resultItem);
        });
        
        // Afficher le gagnant
        if (totalVotes > 0) {
            const [winnerId, winnerName, winnerVotes] = await contract.getWinningCandidate();
            
            const winnerInfo = document.getElementById('winnerInfo');
            winnerInfo.innerHTML = `
                <div>${winnerName}</div>
                <div>avec ${winnerVotes} votes</div>
            `;
            
            document.getElementById('winnerAnnouncement').style.display = 'block';
        }
        
    } catch (error) {
        console.error('Erreur lors du chargement des r√©sultats:', error);
        showToast('Erreur lors du chargement des r√©sultats', 'error');
    }
}

function updateUIVisibility(votingActive, votingEnded, isRegistered, hasVoted) {
    // Sections principales
    document.getElementById('connectionSection').style.display = userAccount ? 'none' : 'block';
    document.getElementById('votingInfo').style.display = userAccount ? 'block' : 'none';
    
    // Contr√¥les administrateur
    document.getElementById('adminControls').style.display = isOwner && userAccount ? 'block' : 'none';
    
    // ‚ú® Afficher le bouton reset seulement si le vote est termin√©
    document.getElementById('resetVoting').style.display = isOwner && votingEnded ? 'inline-flex' : 'none';
    
    // Section de vote
    const showVotingSection = userAccount && isRegistered && !hasVoted && votingActive && !votingEnded;
    document.getElementById('votingSection').style.display = showVotingSection ? 'block' : 'none';
    
    // Section des r√©sultats
    document.getElementById('resultsSection').style.display = votingEnded && userAccount ? 'block' : 'none';
}

function updateConnectionStatus(connected) {
    const statusElement = document.getElementById('connectionStatus');
    const icon = statusElement.querySelector('i');
    const text = statusElement.querySelector('span');
    
    if (connected) {
        statusElement.className = 'connection-status connected';
        icon.className = 'fas fa-check-circle';
        text.textContent = `Connect√© (${userAccount.substring(0, 6)}...${userAccount.substring(38)})`;
    } else {
        statusElement.className = 'connection-status disconnected';
        icon.className = 'fas fa-times-circle';
        text.textContent = 'Non connect√©';
    }
}

// Gestion des √©v√©nements MetaMask
async function handleAccountsChanged(accounts) {
    if (accounts.length === 0) {
        userAccount = null;
        contract = null;
        isOwner = false;
        updateConnectionStatus(false);
        updateUIVisibility(false, false, false, false);
        showToast('Compte MetaMask d√©connect√©', 'warning');
    } else if (accounts[0] !== userAccount) {
        await connectWallet();
    }
}

function handleChainChanged(chainId) {
    // Recharger la page si le r√©seau change
    window.location.reload();
}

// Fonctions utilitaires pour l'interface
function showLoading(message = 'Chargement...') {
    document.getElementById('loadingText').textContent = message;
    document.getElementById('loadingOverlay').style.display = 'flex';
}

function hideLoading() {
    document.getElementById('loadingOverlay').style.display = 'none';
}

function showToast(message, type = 'info') {
    const container = document.getElementById('toastContainer');
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    let icon = 'fas fa-info-circle';
    if (type === 'success') icon = 'fas fa-check-circle';
    else if (type === 'error') icon = 'fas fa-exclamation-circle';
    else if (type === 'warning') icon = 'fas fa-exclamation-triangle';
    
    toast.innerHTML = `
        <i class="${icon}"></i>
        <span>${message}</span>
    `;
    
    container.appendChild(toast);
    
    // Supprimer le toast apr√®s 5 secondes
    setTimeout(() => {
        toast.remove();
    }, 5000);
}

// Debug helpers
window.debugVoting = {
    getContract: () => contract,
    getAccount: () => userAccount,
    getIsOwner: () => isOwner,
    loadData: loadVotingData
};

console.log('üéØ Application de vote blockchain initialis√©e');
console.log('üí° Utilisez window.debugVoting pour d√©boguer');
